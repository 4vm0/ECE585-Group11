// Input data structure

typedef struct packed {
	logic [63:0]	cpu_cyc;
	logic [3:0]		core;
	logic [1:0]		opn;
	logic [33:0]	addr;
} dIn_t;

// Address mapping structure

typedef struct packed {
	logic [15:0]	row;
	logic [5:0]		high_column;
	logic [1:0]		bank;
	logic [2:0]		bank_group;
	logic			channel;
	logic [3:0]		low_column;
	logic [1:0]		byte_select;
} addrMap_t;


addrMap_t addrMap;
addrMap.row = address[33:16];

// Commands list

typedef enum logic [2:0] {
	ACT0 = 3'b000;
	ACT1 = 3'b001;
	RD0 = 3'b010;
	RD1 = 3'b011;
	WR0 = 3'b100;
	WR1 = 3'b101;
	PRE = 3'b110;
} cmd_t;

// Queue structure

typedef struct packed {
	dIn_t		dIN;
	addrMap_t	addrMap;
	cmd_t		cmd;
} q_t;

q_t q_rd 	[5:0];
q_t q_wr 	[4:0];
q_t q_fetch	[4:0];

// CASE STATEMENT FOR COMMANDS

case (cmd)
	ACT0: 		cmd = ACT1;
	ACT1: 		cmd = (opn == 0) ? RD0 : WR0;
	RD0: 		cmd = RD1;
	RD1: 		cmd = PRE;
	WR0: 		cmd = WR1;
	WR1: 		cmd = PRE;
	PRE: 		cmd = ACT0;		// BREAK OUT HERE OR IDLE
	default: 	cmd = ACT0;
endcase

q_rd[0].dIN.cpu_cyc = 30


void main() {
	
}